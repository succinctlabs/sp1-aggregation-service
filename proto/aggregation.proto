// The RPC for interacting with the Aggregation DB
syntax = "proto3";

package aggregation;

service AggregationService {
    // Get the merkle proof for a given proof
    rpc GetAggregatedData(GetAggregatedDataRequest) returns (GetAggregatedDataResponse) {}
    // Get the aggregation status of a given proof
    rpc GetAggregationStatus(GetAggregationStatusRequest) returns (GetAggregationStatusResponse) {}
    // Creates an aggregation request
    rpc AggregateProof(AggregateProofRequest) returns (AggregateProofResponse) {}
    // Get a batch of proofs that have not yet been aggregated
    rpc GetBatch(GetBatchRequest) returns (GetBatchResponse) {}
    // Get the corresponding leaf for a given proof
    rpc GetVkeyAndPublicValues(GetVkeyAndPublicValuesRequest) returns (GetVkeyAndPublicValuesResponse) {}
    // Write a merkle tree to the database
    rpc WriteMerkleTree(WriteMerkleTreeRequest) returns (WriteMerkleTreeResponse) {}
    // Process a batch of proofs
    rpc ProcessBatch(ProcessBatchRequest) returns (ProcessBatchResponse) {}
    // Update status of batch of proofs
    rpc UpdateBatchStatus(UpdateBatchStatusRequest) returns (UpdateBatchStatusResponse) {}
    // Verify aggregation proof and update requests with tx hash, contract address, and chain id
    rpc VerifyAggregationProof(VerifyAggregationProofRequest) returns (VerifyAggregationProofResponse) {}
}

message GetAggregatedDataRequest {
    // The proof id to get the merkle proof for
    bytes proof_id = 1;
}

message GetAggregatedDataResponse {
    // The merkle proof for the given account
    repeated bytes proof = 1;
    // Status of the call
    AggregationStatusResponse status = 2;
    // The tx hash of the proof
    bytes tx_hash = 3;
    // The chain id of the proof
    uint64 chain_id = 4;
    // The contract address of the proof
    bytes contract_address = 5;
}

message GetAggregationStatusRequest {
    // The proof id to get the aggregation status for
    bytes proof_id = 1;
}

message GetAggregationStatusResponse {
    // The aggregation status of the proof
    AggregationStatus status = 1;
}

message AggregateProofRequest {
    // The proof to aggregate
    bytes proof = 1;
    // The corresponding vk
    bytes vk = 2;
}

message GetBatchRequest {
    // The unix timestamp to get all proof requests created after
    optional uint64 created_after = 1;
    // The number of proofs to return (default is 32)
    optional uint64 batch_size = 2;
}

message GetBatchResponse {
    // The list of proof requests
    repeated ProofRequest proofs = 1;
    // The identifier of the batch
    bytes batch_id = 2;
}

message GetVkeyAndPublicValuesRequest {
    // The proof id to get the leaf for
    bytes proof_id = 1;
}

message GetVkeyAndPublicValuesResponse {
    // The vkey for the given proof
    bytes vkey = 1;
    // The public values for the given proof
    bytes public_values = 2;
}

message ProcessBatchRequest {
    // The list of proof requests to process
    repeated ProofRequest proofs = 1;
    // The identifier of the batch
    bytes batch_id = 2;
}

message ProcessBatchResponse {
    // The leaves of the merkle tree generated from the batch
    bytes leaves = 1;
}

message WriteMerkleTreeRequest {
    // The merkle tree to write
    bytes tree = 1;
    // The identifier of the batch
    bytes batch_id = 2;
}

message WriteMerkleTreeResponse {
    // Indicates if the write was successful
    bool success = 1;
}

message UpdateBatchStatusRequest {
    // The identifier of the batch
    bytes batch_id = 1;
    // The status of the batch
    AggregationStatus status = 2;
}

message UpdateBatchStatusResponse {
    // Indicates if the update was successful
    bool success = 1;
}

message VerifyAggregationProofRequest {
    // The proof to verify
    bytes proof = 1;
    // The batch id of the proof
    bytes batch_id = 2;
}

message VerifyAggregationProofResponse {
    // Indicates if the proof was verified
    bool verified = 1;
    // The tx hash of the proof
    bytes tx_hash = 2;
}

message ProofRequest {
    // The identifier of the proof
    bytes proof_id = 1;
    // The aggregation status of the proof
    AggregationStatus status = 2;
    // The proof resourse identifier
    bytes proof = 3;
    // The corresponding vk resource identifier
    bytes vk = 4;
    // The batch id of the proof (null when not aggregated)
    optional bytes batch_id = 5;
    // The unix timestamp of when the request was created
    int64 created_at = 6;
}

message AggregateProofResponse {
    // The identifier of the proof
    bytes proof_id = 1; 
}

enum AggregationStatus {
    UNSPECIFIED_AGGREGATION_STATUS = 0;
    // The proof is pending aggregation
    PENDING = 1;
    // The proof has been aggregated
    AGGREGATED = 2;
    // The proof has been verified
    VERIFIED = 3;
    // The proof verification failed
    FAILED = 4;
}

enum AggregationStatusResponse {
    UNSPECIFIED_RESPONSE_STATUS = 0;
    // Proof was not found
    NOT_FOUND = 1;
    // Proof was found but not yet aggregated  
    AGGREGATION_PENDING = 2;
    // Proof was found and aggregated but not yet verified
    AGGREGATION_COMPLETE = 3;
    // Proof was found and aggregation was verified
    AGGREGATION_VERIFIED = 4;
}
