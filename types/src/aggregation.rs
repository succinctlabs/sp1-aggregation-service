// This file is @generated by prost-build.
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAggregatedDataRequest {
    /// The proof id to get the merkle proof for
    #[prost(bytes = "vec", tag = "1")]
    pub proof_id: ::prost::alloc::vec::Vec<u8>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAggregatedDataResponse {
    /// The merkle proof for the given account
    #[prost(bytes = "vec", repeated, tag = "1")]
    pub proof: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    /// Status of the call
    #[prost(enumeration = "ResponseStatus", tag = "2")]
    pub status: i32,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AggregateProofRequest {
    /// The proof to aggregate
    #[prost(string, tag = "1")]
    pub proof_uri: ::prost::alloc::string::String,
    /// The corresponding vk
    #[prost(string, tag = "2")]
    pub vk_uri: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetBatchRequest {
    /// The unix timestamp to get all proof requests created after
    #[prost(uint64, tag = "1")]
    pub created_after: u64,
    /// The number of proofs to return (default is 32)
    #[prost(uint64, optional, tag = "2")]
    pub batch_size: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBatchResponse {
    /// The list of proof requests
    #[prost(message, repeated, tag = "1")]
    pub proofs: ::prost::alloc::vec::Vec<ProofRequest>,
    /// The identifier of the batch
    #[prost(bytes = "vec", tag = "2")]
    pub batch_id: ::prost::alloc::vec::Vec<u8>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WriteMerkleProofRequest {
    /// The merkle tree to write
    #[prost(bytes = "vec", tag = "1")]
    pub tree: ::prost::alloc::vec::Vec<u8>,
    /// The identifier of the batch
    #[prost(bytes = "vec", tag = "2")]
    pub batch_id: ::prost::alloc::vec::Vec<u8>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WriteMerkleProofResponse {
    /// Indicates if the write was successful
    #[prost(bool, tag = "1")]
    pub success: bool,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProofRequest {
    /// The identifier of the proof
    #[prost(bytes = "vec", tag = "1")]
    pub proof_id: ::prost::alloc::vec::Vec<u8>,
    /// The aggregation status of the proof
    #[prost(enumeration = "AggregationStatus", tag = "2")]
    pub status: i32,
    /// The proof resourse identifier
    #[prost(string, tag = "3")]
    pub proof_uri: ::prost::alloc::string::String,
    /// The corresponding vk resource identifier
    #[prost(string, tag = "4")]
    pub vk_uri: ::prost::alloc::string::String,
    /// The unix timestamp of when the request was created
    #[prost(uint64, tag = "5")]
    pub created_at: u64,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AggregateProofResponse {
    /// The identifier of the proof
    #[prost(bytes = "vec", tag = "1")]
    pub proof_id: ::prost::alloc::vec::Vec<u8>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(sqlx::Type)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AggregationStatus {
    UnspecifiedAggregationStatus = 0,
    /// The proof is pending aggregation
    Pending = 1,
    /// The proof has been aggregated
    Aggregated = 2,
    /// The proof has been verified
    Verified = 3,
    /// The proof verification failed
    Failed = 4,
}
impl AggregationStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::UnspecifiedAggregationStatus => "UNSPECIFIED_AGGREGATION_STATUS",
            Self::Pending => "PENDING",
            Self::Aggregated => "AGGREGATED",
            Self::Verified => "VERIFIED",
            Self::Failed => "FAILED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNSPECIFIED_AGGREGATION_STATUS" => Some(Self::UnspecifiedAggregationStatus),
            "PENDING" => Some(Self::Pending),
            "AGGREGATED" => Some(Self::Aggregated),
            "VERIFIED" => Some(Self::Verified),
            "FAILED" => Some(Self::Failed),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ResponseStatus {
    UnspecifiedResponseStatus = 0,
    /// Proof hash was not found
    NotFound = 1,
    /// Proof hash was found but not yet aggregated
    AggregationPending = 2,
    /// Proof hash was found and aggregated
    AggregationComplete = 3,
}
impl ResponseStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::UnspecifiedResponseStatus => "UNSPECIFIED_RESPONSE_STATUS",
            Self::NotFound => "NOT_FOUND",
            Self::AggregationPending => "AGGREGATION_PENDING",
            Self::AggregationComplete => "AGGREGATION_COMPLETE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNSPECIFIED_RESPONSE_STATUS" => Some(Self::UnspecifiedResponseStatus),
            "NOT_FOUND" => Some(Self::NotFound),
            "AGGREGATION_PENDING" => Some(Self::AggregationPending),
            "AGGREGATION_COMPLETE" => Some(Self::AggregationComplete),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod aggregation_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct AggregationServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl AggregationServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> AggregationServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> AggregationServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            AggregationServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Get the merkle proof for a given proof
        pub async fn get_aggregated_data(
            &mut self,
            request: impl tonic::IntoRequest<super::GetAggregatedDataRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetAggregatedDataResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/aggregation.AggregationService/GetAggregatedData",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "aggregation.AggregationService",
                        "GetAggregatedData",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Creates an aggregation request
        pub async fn aggregate_proof(
            &mut self,
            request: impl tonic::IntoRequest<super::AggregateProofRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AggregateProofResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/aggregation.AggregationService/AggregateProof",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("aggregation.AggregationService", "AggregateProof"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Get a batch of proofs that have not yet been aggregated
        pub async fn get_batch(
            &mut self,
            request: impl tonic::IntoRequest<super::GetBatchRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetBatchResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/aggregation.AggregationService/GetBatch",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("aggregation.AggregationService", "GetBatch"));
            self.inner.unary(req, path, codec).await
        }
        /// Write a merkle proof to the database
        pub async fn write_merkle_proof(
            &mut self,
            request: impl tonic::IntoRequest<super::WriteMerkleProofRequest>,
        ) -> std::result::Result<
            tonic::Response<super::WriteMerkleProofResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/aggregation.AggregationService/WriteMerkleProof",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("aggregation.AggregationService", "WriteMerkleProof"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod aggregation_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with AggregationServiceServer.
    #[async_trait]
    pub trait AggregationService: std::marker::Send + std::marker::Sync + 'static {
        /// Get the merkle proof for a given proof
        async fn get_aggregated_data(
            &self,
            request: tonic::Request<super::GetAggregatedDataRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetAggregatedDataResponse>,
            tonic::Status,
        >;
        /// Creates an aggregation request
        async fn aggregate_proof(
            &self,
            request: tonic::Request<super::AggregateProofRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AggregateProofResponse>,
            tonic::Status,
        >;
        /// Get a batch of proofs that have not yet been aggregated
        async fn get_batch(
            &self,
            request: tonic::Request<super::GetBatchRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetBatchResponse>,
            tonic::Status,
        >;
        /// Write a merkle proof to the database
        async fn write_merkle_proof(
            &self,
            request: tonic::Request<super::WriteMerkleProofRequest>,
        ) -> std::result::Result<
            tonic::Response<super::WriteMerkleProofResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct AggregationServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> AggregationServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for AggregationServiceServer<T>
    where
        T: AggregationService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/aggregation.AggregationService/GetAggregatedData" => {
                    #[allow(non_camel_case_types)]
                    struct GetAggregatedDataSvc<T: AggregationService>(pub Arc<T>);
                    impl<
                        T: AggregationService,
                    > tonic::server::UnaryService<super::GetAggregatedDataRequest>
                    for GetAggregatedDataSvc<T> {
                        type Response = super::GetAggregatedDataResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetAggregatedDataRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AggregationService>::get_aggregated_data(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetAggregatedDataSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/aggregation.AggregationService/AggregateProof" => {
                    #[allow(non_camel_case_types)]
                    struct AggregateProofSvc<T: AggregationService>(pub Arc<T>);
                    impl<
                        T: AggregationService,
                    > tonic::server::UnaryService<super::AggregateProofRequest>
                    for AggregateProofSvc<T> {
                        type Response = super::AggregateProofResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AggregateProofRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AggregationService>::aggregate_proof(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AggregateProofSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/aggregation.AggregationService/GetBatch" => {
                    #[allow(non_camel_case_types)]
                    struct GetBatchSvc<T: AggregationService>(pub Arc<T>);
                    impl<
                        T: AggregationService,
                    > tonic::server::UnaryService<super::GetBatchRequest>
                    for GetBatchSvc<T> {
                        type Response = super::GetBatchResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetBatchRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AggregationService>::get_batch(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetBatchSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/aggregation.AggregationService/WriteMerkleProof" => {
                    #[allow(non_camel_case_types)]
                    struct WriteMerkleProofSvc<T: AggregationService>(pub Arc<T>);
                    impl<
                        T: AggregationService,
                    > tonic::server::UnaryService<super::WriteMerkleProofRequest>
                    for WriteMerkleProofSvc<T> {
                        type Response = super::WriteMerkleProofResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::WriteMerkleProofRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AggregationService>::write_merkle_proof(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = WriteMerkleProofSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for AggregationServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "aggregation.AggregationService";
    impl<T> tonic::server::NamedService for AggregationServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
